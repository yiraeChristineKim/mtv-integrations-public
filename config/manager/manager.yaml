---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller
  namespace: open-cluster-management
  labels:
    control-plane: mtv-controller
    app.kubernetes.io/name: mtv-integrations
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: mtv-controller
      app.kubernetes.io/name: mtv-integrations
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: controller
      labels:
        control-plane: mtv-controller
        app.kubernetes.io/name: mtv-integrations
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        # Projects are configured by default to adhere to the "restricted" Pod Security Standards.
        # This ensures that deployments meet the highest security requirements for Kubernetes.
        # For more details, see: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - command:
        - /manager
        args:
          - --leader-elect
          - --health-probe-bind-address=:8081
        image: controller:latest
        imagePullPolicy: IfNotPresent
        name: controller
        ports:
          # Webhook server port.
          - containerPort: 9443
            protocol: TCP
            name: webhook-http
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          # TODO(jpacker): Adjust the requests, once you see this running in the environment.
          requests:
            cpu: 10m
            memory: 64Mi
        # Webhook
        volumeMounts:
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
      # Webhook
      volumes: 
        - name: cert
          secret:
            defaultMode: 420
            secretName: mtv-plan-webhook-server-cert
      serviceAccountName: mtv-integrations-manager
      terminationGracePeriodSeconds: 10
